-- phpMyAdmin SQL Dump
-- version 4.9.2
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Jan 16, 2020 at 08:34 AM
-- Server version: 10.4.11-MariaDB
-- PHP Version: 7.4.1

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `sandbox`
--

-- --------------------------------------------------------

--
-- Table structure for table `categories`
--

CREATE TABLE `categories` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `slug` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `categories`
--

INSERT INTO `categories` (`id`, `name`, `slug`, `created_at`, `updated_at`) VALUES
(1, 'PHP', 'php', '2020-01-14 15:20:00', NULL),
(2, 'JavaScript', 'js', '2020-01-14 15:45:19', NULL),
(3, 'HTML', 'html', '2020-01-14 15:45:30', NULL),
(4, 'CSS', 'css', '2020-01-14 15:45:44', NULL),
(5, 'Bootstrap', 'bootstrap', '2020-01-14 15:46:02', NULL),
(6, 'Laravel', 'laravel', '2020-01-14 15:46:13', NULL),
(7, 'SQL', 'sql', '2020-01-14 15:46:22', NULL),
(8, 'Carrier', 'carrier', '2020-01-15 02:41:35', NULL),
(9, 'Git', 'git', '2020-01-15 02:50:31', NULL);

-- --------------------------------------------------------

--
-- Table structure for table `migrations`
--

CREATE TABLE `migrations` (
  `id` int(10) UNSIGNED NOT NULL,
  `migration` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `migrations`
--

INSERT INTO `migrations` (`id`, `migration`, `batch`) VALUES
(1, '2020_01_13_095408_create_categories_table', 1),
(2, '2020_01_13_100040_create_posts_table', 2);

-- --------------------------------------------------------

--
-- Table structure for table `posts`
--

CREATE TABLE `posts` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `category_id` varchar(11) COLLATE utf8mb4_unicode_ci NOT NULL,
  `title` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `details` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `image` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `posts`
--

INSERT INTO `posts` (`id`, `category_id`, `title`, `details`, `image`, `created_at`, `updated_at`) VALUES
(1, 'Carrier', 'Resume Skills for the Developer with Upward Ambition', 'I originally posted this on my blog about two years ago. If it\'s interesting to you, I post new content on daedtech.com roughly weekly.\r\n\r\nIt strikes me that, lately, I write a lot about how to make it in a free agent world (or how to get there).  So today, I\'d like to switch up it a little and give a nod to those of you in the salaried world, and perfectly happy there to boot.\r\n\r\nBut don\'t expect me to talk about a resume skills section or what have you without at least a little realpolitik and a little cynicism.\r\n\r\nThe resume-interview one-two punch is a stupid way for employers to find employees.  Full stop.  But it\'s also the prohibitive incumbent and the system that you\'re going to have to navigate.\r\n\r\nSo let\'s focus on resume skills today and give you a fighting chance at navigating the process.  In fact, let\'s go beyond just navigating it and look at how to maximize how it works for you.  This has two essential components.\r\n\r\nFilter the riff-raff employers out of your search as quickly as possible.\r\nImpress the ones you care about.\r\nLet\'s look at how you can tune the resume skills section to help with both.\r\n\r\nThe resume bot 9000 is the only one that cares about your resume skills section.\r\n\r\nThe Anatomy and Purpose of a Resume\r\nFirst of all, let\'s consider the purpose of a resume.  Lansing Community College, winner of the SEO sweepstakes for \"what\'s the purpose of a resume\" has the following to say.\r\n\r\nThe purpose of a resume is to provide a summary of your skills, abilities and accomplishments. It is a quick advertisement of who you are. It is a \"snapshot\" of you with the intent of capturing and emphasizing interests and secure you an interview.\r\nWho am I to argue with an institution of higher education?\r\n\r\nThat all sounds exactly like the ostensible purpose of a resume and a very sunny assessment besides.  It\'s your own tiny commercial in print, and, done right, it gets you interviews.\r\n\r\nBut let\'s be a little more blunt about the way things work.\r\n\r\nYou put together a resume, trying to stuff as many self-aggrandizing tidbits as you can in there while looking plausibly humble.  Then you fire it off for the viewing displeasure of an extremely bored person whose main mission is to find reasons not to call you.\r\n\r\n\r\n\r\nThis resume filtration will feature two passes, usually.  These include an automated or semi-automated pass to disqualify anyone without the magic acronyms and a second one to disqualify anyone that seems fishy somehow.\r\n\r\nTo navigate this minefield, you put together a resume with the following sections.\r\n\r\nBasic contact information.\r\nEmployment history, including job titles, job descriptions, and accomplishments.\r\nEducation.\r\nThe resume skills section.\r\nSome people include an \"objective\" which should probably be \"straight cash, Homie.\"  (Just kidding -- no one appreciates honesty here, so I\'d just omit this altogether)\r\nWhat do Resume Skills Look Like?\r\nIn this particular post, though, I\'m going to focus on the resume skills, so let\'s not worry about the other sections too much.  The standard advice there is usually good, particularly the part about trying to quantify the accomplishments at your various jobs as much as possible.\r\n\r\nIt\'s the resume skills section that features the great tragedy among the broader, lesser tragedy that is this whole process.  I\'m talking about this, lifted from a hypothetical resume for one Amy Jones, \"midlevel software engineer,\" on Monster.com (hey, they\'re still truckin\', apparently!).\r\n\r\n\r\n\r\nYou\'ve got a coherent narrative there for a little while with what I assume is her current job.  Then, right after that, Amy belches out a list of skills like some weird Youtube comment spam, including ending with \"and more!\"\r\n\r\nIt\'s merciful that she spares us the \"more,\" though because it probably includes inanities like \"detail-oriented\" and \"self-starter.\"\r\n\r\nWe all do this.\r\n\r\nI did this, many years ago, when I still made resumes.  It\'s half cargo cult and half FOMO, wanting to make sure that we don\'t get knocked out in that first round where Resume Scanbot 9000 filters out anyone missing JDeveloper or Eclipse.\r\n\r\nIt\'s completely understandable, and you should stop this immediately.', '7fgo.jpg', '2020-01-15 17:29:56', NULL),
(2, 'Carrier', 'Stop programming to become a better developer', 'Have you ever stayed up at night trying to fix a problem, just to realize the other day that it was just a simple mistake? Or do you feel that everything in your work gets more complex and complex everytime? Maybe it\'s time for you to stop programming.\r\n\r\n\"What?! Like... Forever??\" No! Not at all. What I\'m trying to say, it\'s that is time for you to rest. Resting, will not only make you a better developer, but it will help you have your mind clear when you come back to code.\r\n\r\nHi! I\'m Codedgar and today I want to talk about resting, and how to stop programming for a while, which can make you a better developer.\r\n\r\nDo you know how many people say \"To become the best, you should always practice, and never stop until you are the best\"? For me, that\'s a big, big lie.\r\n\r\nJust think of the following: If you are doing exercise, and everyday you push your body to the limit, eventually, you will exhaust yourself, and maybe have to rest for a long time, making all the effort almost worthless. I did bboying for almost 2 years and I can tell you for sure that you need to find a balance between doing and resting, and it\'s the same for programming or any other thing you want to do.\r\n\r\nI\'m going to break down this article in several parts, so it becomes easier to read. First, I\'m going to talk about what problems can bring you bad resting, then, I\'m going to talk about how to fix bad resting behaviors and health tips that will help you get better at programming by resting correctly.\r\n\r\nDisclaimer\r\n\"Where does this information comes from? Are you a doctor?\" No. This information comes from 2 courses (Prevention of accidents and Working security in industrial environments) that I made in 2016 and 2017, part of my technician degree in electronics, and my personal experience dealing with burnout.\r\n\r\nWhat problems can bring you programming without proper rest\r\nYou may have seen a lot of memes out there being like \"Haha we programmers don\'t sleep\", and I think this is one of the main problems with us, sleeping is one of the key factors to keep your mind clear and work correctly, but if you don\'t sleep and keep yourself stressed, you can have permanent problems, such as:\r\n\r\nBurnout\r\nBurnout is one of the most harmful problems you can find and I think it often goes unnoticed. In a nutshell (Jumping some details), burnout can bring you permanent problems if it\'s not treated in time, burnout in people can manifest itself in several ways, including extreme stress and tiredness. If you suffer from Burnout for a long period of time, it can lead to heart diseases and circulatory problems.\r\n\r\nGeneral irritation\r\nThis one really can mess up your social connections. I used to work on a place that led me to a lot of stress and general irritation, I got home to be angry with everyone and no one could talk to me without me expressing just angriness. People around you may not have the fault of how work is going, but if you are stressed all the time people will notice, and maybe will leave you alone.\r\n\r\nLoss of passion\r\nPassion is really important for programming, but if you are constantly stressed, you may start to think \"Is this really for me?\". And I\'ve heard people that had abandon completely programming just because of this. The end result of your work can also be affected by this.\r\n\r\nLoss of productivity\r\nIf your stress is building up, not only you, your friends, family, and work can be affected, but your productivity too. The work you did in one day or a few weeks can transform in months. Leading to general demotivation.\r\n\r\nNow, we know that we as people, our friends, our family, our work and productivity can be affected. What can we do about this? It starts with noticing and stopping behaviors that affect our rest, which leads me to my next point.\r\n\r\nBad habits that get in the way of resting.\r\nWe often unknowingly get in the way of our rest, and even if you don\'t know it, you may do some of the things from the next points, and I\'ll help you fix them.\r\n\r\nI had a dream of the fix! I\'m gonna go and code it!\r\nDon\'t do this. In your dream maybe it worked perfectly, but you may have to spend a few hours implementing this and therefore interrupting your sleeping, or whatever you were doing.\r\n\r\nWhat can we do?\r\nMy dad actually suffer from this. And my mother used to hide the computer cable so he couldn\'t turn it on after they went to sleep, he complained and my mom told him \"Just write it down, and do it tomorrow\". She told me this after seeing me waking up in the middle of the night to code something I dreamt about that would fix my bug. And if I\'m out in the street, dream with it or anything, I just write it down, and later take a better look at it.\r\n\r\nI\'m not going off work or to sleep without finishing this\r\nWhile sometimes this may work for you, it will eventually lead you to rest incorrectly. Just think of this, the later it becomes, the less energy your brain has to actually think on how to finish what you are doing.\r\n\r\nWhat can we do?\r\nRecopilate as much information as you can about what you are doing, write about it, think about it, but don\'t stay woke all night. If you wake up in the morning with your mind clear, it will take you less time and you won\'t sacrifice your rest :)\r\n\r\nThese are just 2 examples to give you an idea, I\'m pretty sure you can come up with other ways in which we sometimes neglect our rest. But just as there are bad habits, you can start building up good habits to keep your mind from overworking itself and rest correctly.\r\n\r\nGood habits to rest correctly\r\nWe touched 2 examples of bad resting, but I also want to talk about great habits to help you rest and don\'t overload your brain.\r\n\r\nCan\'t figure the answer? Stand and walk for a second\r\nIn all my time working as a developer, I cannot find something more relaxing after hours of coding without success than walking and taking a cup of cold water. Walking and standing for a while is great for your legs and circulation. But is also great to take a second to think about what were you doing and what other approaches you can try.\r\n\r\nTake one day of the week to rest completely.\r\nThis may be hard to achieve if you are working on several projects at the same time. But if you take one day for your brain to cool down completely you will start with the right feet the next day.\r\n\r\nDo exercise!\r\nIf you are all day sitting at your desk, most of your physical energy will be untouched, so at the end of the day, you might have problems sleeping. So what I recommend, is balancing the mental effort with physical effort. Do a sport, go to the gym, or bboying too!\r\n\r\nTake your time\r\nYeah, I know, deadlines are scary and all. But don\'t overwork yourself. Try to find a pacing that feels easy on you, this way you won\'t overload of work even if you have a ton of things to do', 'k3nr.jpg', '2020-01-15 17:32:46', NULL),
(3, 'PHP', 'Awesome PHP Resources on DEV', 'PHP is an unfairly underrated language, but here at DEV, we have yet some great resources about it.\r\nIt\'s not so easy to find them out, because PHP don\'t have a big audience and related posts get drown among many other (JS) posts, but nevertheless, some of them reached a pretty high quality.\r\n\r\n🏗 Bootstrapping\r\nIt can be difficult for newcomers to know where to start a new PHP project. If you want to give a try to the Slim micro-framework, have a loot at @charliedevelops \'s following post:\r\n\r\ncharliedevelops image \r\nGetting started with Slim PHP framework by building a very simple MVC/OOP app\r\ncharliedeveloper ・ Jun 29 \'18 ・ 4 min read\r\n#webdev #beginners #php #tutorial\r\n✅ Clean code\r\nA great post about some clean code rules in PHP, with great screenshots:\r\n\r\ngonedark image \r\nA month of clean code\r\nJason McCreary ・ Nov 10 \'17 ・ 3 min read\r\n#programming #practices #refactoring #php\r\nSome other clean code rules, applied to a concrete example:\r\n\r\nrestoreddev image \r\nWriting Beautiful Code\r\nAndrew Davis ・ Sep 24 \'18 ・ 4 min read\r\n#webdev #productivity #php\r\nA very detailed article about clean architecture and design patterns:\r\n\r\nbarryosull image \r\nCleaning up your codebase with a clean architecture\r\nBarry O Sullivan ・ May 15 \'17 ・ 9 min read\r\n#cleancode #layeredarchitecture #php #design\r\n🚥 Quality\r\nI wrote the following post to show dev how to check the quality of PHP code by using 3 static analysis tools (phpcs, phpmd & php-cs-fixer):\r\n\r\nbiros image \r\n🚥 How to Write Clean Code in PHP 🐘\r\n🇫🇷 Boris Jamot ・ Aug 31 \'18 ・ 9 min read\r\n#cleancode #tools #codingstyle #php\r\nThe next article shows how to automate everything with the editor, composer, git & the CI/CD pipeline:\r\n\r\nbiros image \r\n🚥 How to Automate Code Quality Checks in your Workflow? ⚙\r\n🇫🇷 Boris Jamot ・ Sep 10 \'18 ・ 8 min read\r\n#git #automation #cleancode #bash\r\n☑️ Tests\r\nHow to design your code to be able to unit test everything:\r\n\r\nbiros image \r\n🐘 Unit Tests in PHP\r\n🇫🇷 Boris Jamot ・ Jan 15 \'19 ・ 4 min read\r\n#php #testing #showdev #codequality\r\nNot so specific to PHP, but still interesting:\r\n\r\ngonedark image \r\nFake it by stubbing the mock, dummy\r\nJason McCreary ・ Nov 14 \'17 ・ 3 min read\r\n#testing #php\r\nBecause unit tests are never enough, we need acceptance tests. Here is a simple way to test an HTTP API as a black box:\r\n\r\nbarryosull image \r\nAcceptance testing your PHP app with ease\r\nBarry O Sullivan ・ Apr 23 \'18 ・ 5 min read\r\n#tdd #php #acceptancetests\r\n🔒 Security\r\nIt\'s well known that misusing PHP can lead to serious security breaches. The following resources will be a great introduction for people who care about security (who doesn\'t?):\r\n\r\ndevmazee2057282 image \r\nPHP Security: Introduction\r\ndewbiez ・ Sep 20 \'18 ・ 1 min read\r\n#php #security\r\n5 rules to secure your PHP application:\r\n\r\nrestoreddev image \r\nSecurity Tips for a PHP Application\r\nAndrew Davis ・ Aug 7 \'18 ・ 3 min read\r\n#php #security\r\n🛠 Tooling\r\nThe best tool in PHP world is unquestionably composer. Number of its features are often unknown. It\'s not only a dependency manager. Let\'s have a look at its possibilities:\r\n\r\ngauravmak image \r\nWhat, why and how of PHP Composer\r\nGaurav Makhecha ・ Jun 14 \'18 ・ 8 min read\r\n#php #laravel #composer\r\n@david_j_eddy introduces 5 essential tools every PHP developers should use:\r\n\r\ndavid_j_eddy image \r\n5 PHP Tools to make your life more enjoyable.\r\nDavid J Eddy ・ Aug 2 \'18 ・ 4 min read\r\n#php #tool #productivity #codequality\r\nIf you ever tasted the pleasure of debugging, then you know you can\'t do without. Thanks to @brpaz , you\'ll now know how make all the things work together:\r\n\r\nbrpaz image \r\nDocker, PHPStorm and Xdebug, The definitive guide\r\nBruno Paz ・ Sep 6 \'18 ・ 4 min read\r\n#docker #xdebug #phpstorm #php\r\nThis last tool has been developed by the author of the article, who can thus help you get started. It\'s a tool to quickly bootstrap a PHP project from scratch:\r\n\r\nadhocore image \r\nPHP project scaffolding (kickstarting) tool\r\nJitendra Adhikari ・ Aug 15 \'18 ・ 1 min read\r\n#showdev #php #productivity #automation\r\n🚀 Other\r\nBecause we all know that reading books help us understanding the things more deeply, here is a list of suggested books about PHP:\r\n\r\nbrpaz image \r\nMy Favorite PHP books\r\nBruno Paz ・ Sep 23 \'18 ・ 2 min read\r\n#php #books\r\nThe PHP edition of the well known imposter syndrome:\r\n\r\nrestoreddev image \r\nImposter Syndrome: PHP Edition\r\nAndrew Davis ・ Nov 28 \'17 ・ 2 min read\r\n#php #impostersyndrome #webdev #career\r\nBecause such articles are very, very rare, and because I already found myself lost in the face of the lack of resources when « cloudifying » a PHP app, here is a great article about PHP with containers:\r\n\r\njohnmccuk image \r\nIsolating PHP with Docker Containers\r\nJohn McCracken ・ Nov 1 \'18 ・ 1 min read\r\n#docker #php #tutorial\r\n🌠 People to follow\r\n@restoreddev \'s posts are always well written, and most of them are about PHP. As a PHP dev, you can\'t definitely not follow him.\r\n\r\nrestoreddev image \r\nAndrew Davis+ FOLLOW\r\nPHP and JavaScript web chef with a little Go and Swift on the side.\r\ntwitter logorestoreddev github logorestoreddev external link iconhttps://andrewdavis.me\r\n\r\n@gonedark \'s posts are mostly about clean code, PHP and git. Some of them are among the most popular on DEV.\r\n\r\ngonedark image \r\nJason McCreary+ FOLLOW\r\nI build things with my hands. The human behind Shift - https://laravelshift.com, master of Git - https://gettinggit.com, and author of \"BaseCode\" - https://basecodefieldguide.com\r\ntwitter logogonedark external link iconhttps://jason.pureconcepts.net\r\n\r\nTwo of the above articles were written by @brpaz , and some others worth the read.\r\n\r\nbrpaz image \r\nBruno Paz+ FOLLOW\r\nWeb Engineer. Working mostly with PHP, Symfony and Golang. Entusiast about Engineering Best Practices, Continuous Delivery and DevOps. Sports and FC Porto fan!\r\ntwitter logobrunopaz88 github logobrpaz external link iconhttps://brunopaz.dev\r\n\r\nIf you think a PHP post is missing in the list, don\'t hesitate to mention it in the comments !\r\n\r\nThanks for reading', 'wx04.jpg', '2020-01-15 17:36:37', NULL),
(4, 'HTML', 'Stop using so many divs! An intro to semantic HTML', 'HTML5: Such a standard\r\nHTML5 is not new. That\'s an understatement; an initial working draft was released for public comment in January of 2008 (11 years ago!), and it became a full-fledged W3C recommendation in October of 2014, 4½ years ago. So, like, it\'s been around for a while.\r\n\r\nOne of the primary advancements of HTML5 was introducing a standardized set of semantic elements. The term \"semantic\" refers to the meaning of a word or a thing, so \"semantic elements\" are elements designed to mark up the structure of a document in a more meaningful way, a way that makes it clear what they\'re for, what purpose they serve in the document. And importantly, since they\'re standardized, these elements define the document in a way that everyone can use and understand, robots included.\r\n\r\nI think the HTML5 spec itself sums up the issue nicely in a note under the definition of the <div> element:\r\n\r\nNOTE:\r\nAuthors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors.\r\n— https://www.w3.org/TR/html5/grouping-content.html#the-div-element\r\n\r\nI\'ll divide the semantic block elements into two categories: primary structure and content indicators. These aren\'t standard terms or anything; I just made them up for this article. But I think the distinction is useful enough. 🤷‍♂️\r\n\r\nPrimary Structures\r\nThere\'s a super common pattern that can be found in websites, tutorials, and even CSS libraries all over the internet, and for good reason. We often divide a page at its topmost level into three regions: header, main, and footer, then divide those regions into sections as needed. I included this in my example above to prove the point:', '4ils.png', '2020-01-15 17:38:51', NULL),
(5, 'CSS', 'CSS: From Zero to Hero', 'CSS defines the way things look on your websites. HTML is your content, JavaScript adds interaction, but the appearance comes down to CSS. CSS is super powerful, and has a ton of awesome stuff built in. This post will take you from introductory syntax through creating layouts and making sites responsive!\r\n\r\nSyntax\r\nCSS is comprised of selectors and declarations. Selectors are how we tell CSS which elements to apply styles to. Declarations are the actual styles that will be applied for that element, i.e. they are everything within the braces. Within those declarations, we have properties and values. The properties are the type of style we are applying, the value is what we are actually applying.\r\n\r\n\r\n\r\nThe above CSS is saying, make the font color for all h1\'s blue. The h1 is the selector, the declaration is everything between the braces, the property is color, and the value is blue.\r\n\r\nOne final piece of CSS syntax is comments - these are ignored by the browser -- they are just there for humans to document their code. In CSS these look like the following:', 'm081.jpg', '2020-01-15 17:41:23', NULL),
(6, 'Bootstrap', 'Why I don\'t use Bootstrap anymore', 'For many web developers, Bootstrap is the way to go when you have to create a Website or App. But in the five years I have making websites, I have found things that made me change my decision of using Bootstrap at all, and I\'ve changed the way I create websites almost completely.\r\n\r\nHi! My name is Codedgar and today I wanted to talk of why I don\'t use Bootstrap anymore. Since it\'s a question that students, coworkers, and people, in general, have been asking me a lot recently: Why I don\'t use Bootstrap?\r\n\r\nLet\'s start with my history (I\'m gonna be short, promise C: ) When I started working on frontend web development, the first thing I crossed upon was Bootstrap. And with that, I thought I had frontend developing mastered, it was easy, fast to use and it has a lot of components! Nice!\r\n\r\nBut as my work progressed and the websites became more and more custom, I started to find Bootstrap a little bit unuseful, and that\'s when I came to a conclusion as to why I would not be using Bootstrap in my new works.\r\n\r\nFor easier understanding, I have divided this post in the reasons of why I don\'t use it, enjoy:\r\n\r\n1- Weight\r\n2- Components and Utilities\r\n3- Styling\r\n\r\n1- Weight:\r\n\"Weight? But Bootstrap is less than 500KB\". Yes, I\'m aware of that. But let\'s take on consideration how much of Bootstrap we actually use. And using Bootstrap means that you have to use also jQuery, so if you were to create a landing page with Bootstrap, you would have to use jQuery, Bootstrap CSS, and Bootstrap JS. All of these resources will not be used even in half if you use Bootstrap. And that brings me to my next problem.\r\n\r\n2- Components:\r\n\"Lack of?\" Nope, not at all, is actually the opposite. Bootstrap has so many components and utilities, that you are almost certain to never use even half of them. And you may argue that with NodeJS you can compile and use only the CSS that the website uses, but with plain HTML for a server with Cpanel, this is not possible (At least that I know). So there\'s this vast quantity of components that you will maybe not use and they will be there anyway.\r\n\r\nThis is not a problem just of Bootstrap, but of many frameworks I\'ve seen, like Materialize or UiKit, where there are components that most people wouldn\'t use and there are classes that can be broken down into only one style, like:\r\n\r\n.modal-top-left{top:5%;left:5%}\r\n\r\nAnd so on for modal-top-right, modal-bottom-left, modal-bottom-right. If you wanted to change the position of the modal you could totally do it with only one class, adding these classes is just dumb.\r\n\r\n3- Styling:\r\nWhile Bootstrap is easy to use, it\'s not so easy to customize as you might think. Some components will require you to use !important several times, which is not ideal when creating CSS. And having to override the default styles of Bootstrap is just like having to create your own CSS from start.\r\n\r\nWhat do I use then?\r\nMost people at this point just say \" So what? You make CSS from start and don\'t use any framework?\" And well, I don\'t create my CSS from scratch, and I do use a framework, but only for managing the columns of the website. The framework I use is called Flexbox Grid and it justs comes with columns and rows, nothing more. And it only weights 1.9KB! So, on a website with 1 homepage and 4 subpages, the total CSS (including Flexbox Grid) is only 5KB. For me, that\'s amazingly fast!\r\n\r\nAnd should I use Bootstrap?\r\nWell, there\'s something I can\'t deny and it\'s that if you need to develop something incredibly fast you can use Bootstrap. And if you are thinking if you should, or should not use Bootstrap, ask yourself:\r\n\r\n1- Will I use several components of Bootstrap?\r\n2- Am I in a rush to develop this frontend?\r\n3- Is the design important for this?\r\n\r\nIf your answers are: Yes, yes, and no; Go ahead and use Bootstrap without shame.\r\n\r\nExtra: Do I hate Bootstrap?\r\nOf course not. I think that is amazing to develop websites quicker and easier, but I just would not be using it anymore because I prefer to make my own components and craft almost everything by hand. I know that Bootstrap will live along a still be used by a lot of people, and that\'s totally fine :)\r\n\r\nWhat do you think? Do you use Bootstrap?', 'iqso.jpg', '2020-01-15 17:43:15', NULL),
(7, 'Laravel', 'Adding testing to a Laravel API', 'How it works\r\nWe first query the API using the json() method which returns a response from the API. Then we check the response and assert certain things, like the status code (assertStatus()), or data itself (assertJson).\r\n\r\nDebugging tests\r\nIf at any point the test fails, and you\'re not sure why, just do a dd($response) to dump the response into the console. You can also use commands like var_dump($variable) to print out text in the console during tests. It helps verify when a method returns a boolean (like deleting a resource) or verifying properties exist on a resource (e.g. $post->id). Be wary of using var_dump() for larger variables (like the response object) - it tends to crash and freeze tests.\r\n\r\nBe careful when asserting data with duplicate property names, even if they\'re nested (e.g. { id: 1, comment { id: 129 } }). assertJson will collapse the array and assume you mean both IDs. In this case, you have to use assertExactJson to check duplicate property names.\r\n\r\nRunning the tests\r\nLaravel doesn\'t actually write this anywhere in their docs, and you\'d assume that you can run a test with something like php artisan test -- but you actually have to use the PHPUnit library in your composer dependencies:\r\n\r\nRun that command from the project root and PHPUnit will run all tests located in your /tests/ folder.\r\n\r\nMake sure all composer dependencies are installed or you won\'t be able to run this script. And if you\'re running Laravel inside of Docker, make sure to run PHPUnit inside the container docker-compose exec workspace ./vendor/bin/phpunit\r\n\r\nRunning a single test\r\nSometimes you need to run a single test in isolation. I had to look this one up too:\r\n\r\n./vendor/bin/phpunit --filter TestControllerName\r\n\r\nThis also works as well, albeit more verbose:\r\n\r\n./vendor/bin/phpunit tests/Feature/TestControllerName.php\r\n\r\nKeep it simple silly\r\nI found that with basic Laravel APIs, you tend to repeat the same tests over and over again. Wouldn\'t it be nice if an API test looked like one of our Models, and was as simple as writing an extended class with protected variables?', 'kbyj.jpg', '2020-01-15 17:46:15', NULL);

--
-- Indexes for dumped tables
--

--
-- Indexes for table `categories`
--
ALTER TABLE `categories`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `migrations`
--
ALTER TABLE `migrations`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `posts`
--
ALTER TABLE `posts`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `categories`
--
ALTER TABLE `categories`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;

--
-- AUTO_INCREMENT for table `migrations`
--
ALTER TABLE `migrations`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT for table `posts`
--
ALTER TABLE `posts`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
